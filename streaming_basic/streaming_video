/*
    대용량 streaming 처리는 node.js 의 강점이다.
    node.js는 이벤틀 Loop 기반의 비동기 처리를 지원하기 때문에 대용량 파일을
    구간별로 작게 나누어서 처리하는 작업에 강점을 가지고 있다.

    일반적인 readFile()의 문제점으로는 아래와 같다.
    - 클라이언트는 서버로부터 데이터를 전송받을 때 까지 대기를 한다. 용량이 커질수록 대기시간이 길어진다.
    - 위의 이유료 서버의 효율이 떨어지게 된다.

    이런 단점을 보완하기 위해 데이터를 전체를 다 읽거나 쓰지 않아도
    중간에 처리 할 수 있도록 해주는것이 "stream"이다.

    브라우저에 URL로 호출하게 되면 데이터를 잘게 나누어서 전송가능한 양이 되면 stream의 data이벤트를 발생한다.
    그러면 동영상 파일의 용량을 잘게 나누어서 전송하게 된다.
*/

const http = require("http");
const url = require("url");
const fs = require("fs");


const server = http.createServer(function(request, response) {
    let parsedUrl = url.parse(request.url);
    let resource = parsedUrl.pathname;

    console.log(`resource = ${resource}`);

    let resourcePath = `.${resource}`;
    console.log(`resourcePath = ${resourcePath}`);

    // html 페이지 요청이 들어온 경우는 텍스트 파일 처리
    if(resource.indexOf("/html/") == 0) {
        fs.readFile(resourcePath, "utf-8", function(error, data) {
            if(error) {
                response.writeHead(500, {"Content-Type":"text/html"});
                response.end(`500 Internal Server ${error}`);
            } else {
                response.writeHead(200, {"Content-Type":"text/html"});
                response.end(data);
            }
        });
    } else if(resource.indexOf("/movie/") == 0) {
        // stream 생성
        var stream = fs.createReadStream(resourcePath);
        // 잘게 쪼개진 stream이 몇번 전송되는지 확인하기 위한 count
        var count = 0;

        // 잘게 쪼개진 data를 전송할 수 있으면 data 이벤트 발생
        stream.on("data", function(data) {
            count = count + 1;
            console.log(`data count = ${count}`);
            // data 이벤트가 발생되면 해당 data를 클라이언트로 전송
            response.write(data);
        });

        // 데이터 전송이 완료되면 end 이벤트 발생
        stream.on("end", function() {
            console.log(`end streaming`);
            // 클라이언트에 전송완료를 알림
            response.end();
        });

        // 스트림 도중 에러 발생 시 error 이벤트 발생
        stream.on("error", function(error) {
            console.log(error);
            // 클라이언트로 에러메세지를 전달하고 전송 완료
            response.end(`500 Internal Server ${error}`);
        });
    } else {
        response.writeHead(404, {"Content-Type":"text/html"});
        response.end(`404 Page Not Found`);
    }
});

server.listen(8080, function() {
    console.log(`Server is running`);
});